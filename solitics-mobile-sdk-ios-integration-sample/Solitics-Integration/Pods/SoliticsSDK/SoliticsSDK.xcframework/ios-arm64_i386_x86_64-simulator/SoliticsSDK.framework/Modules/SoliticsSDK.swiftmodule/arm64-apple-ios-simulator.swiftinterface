// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SoliticsSDK
import CommonCrypto
import Dispatch
import Foundation
import MessageUI
import Network
import SafariServices
@_exported import SoliticsSDK
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import os
import zlib
public protocol ILoginResult {
  var hashedSubscriberId: Swift.Int { get }
}
@objc public class SOLLoginResult : ObjectiveC.NSObject {
  final public let hashedSubscriberId: Swift.Int
  public init(_ subscriberId: Swift.Int)
  convenience public init(result: SoliticsSDK.ILoginResult)
  @objc deinit
}
extension SoliticsSDK.SOLLoginResult : SoliticsSDK.ILoginResult {
}
@objc(SoliticsLogListener) public protocol SoliticsLogListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onLogMessage(_ message: Swift.String)
}
@objc(SoliticsPopupDelegate) public protocol SoliticsPopupDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func soliticsShouldOpenMessage(with content: SoliticsSDK.SOLPopupContent) -> Swift.Bool
  @objc optional func soliticsMessageDidDisplayPopup()
  @objc optional func soliticsMessageDidDismissPopup()
  @objc optional func soliticsMessageDidTrigerAction()
  @objc optional func soliticsShouldDismissPopup(forNavigationTarget urlString: Swift.String) -> Swift.Bool
  @objc optional func soliticsMessageDidClosePopup(forNavigationTarget urlString: Swift.String)
  @objc optional func soliticsFaild(ToOpen content: SoliticsSDK.SOLPopupContent)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Solitics) open class Solitics : ObjectiveC.NSObject {
  weak public class var delegate: SoliticsSDK.SoliticsPopupDelegate! {
    get
    set
  }
  public class func activate()
  public class var activeGlobalLogs: Swift.Bool {
    get
    set
  }
  public class var activeSocketLogs: Swift.Bool {
    get
    set
  }
  public class var activeRestflLogs: Swift.Bool {
    get
    set
  }
  public class func onLogin(_ loginMetadata: SoliticsSDK.ILoginMetadata, completion: @escaping (Swift.Result<SoliticsSDK.ILoginResult, Swift.Error>) -> Swift.Void)
  public class func onLogout()
  public class func onEmitEvent(txType: Swift.String?, txAmount: Swift.Double?, customFields: Swift.String?, completion: @escaping (Swift.Result<SoliticsSDK.IEmitEventResult, Swift.Error>) -> Swift.Void)
  public class var currentLoginInfo: SoliticsSDK.ILoginMetadata? {
    get
  }
  public class func dismissSoliticsPopup()
  public class func register(SoliticsLogListener logListener: SoliticsSDK.SoliticsLogListener)
  public class func remove(SoliticsLogListener logListener: SoliticsSDK.SoliticsLogListener)
  @objc deinit
}
public protocol IEmitEventResult {
  var hashedSubscriberId: Swift.Int { get }
}
@objc public class SOLPopupContent : ObjectiveC.NSObject {
  public var messageID: Swift.String
  public var messageHTML: Swift.String
  public var webhookParams: [Swift.String : Any]
  public init(messageID: Swift.String, messageHTML: Swift.String, webhookParams: [Swift.String : Any])
  @objc deinit
}
extension SoliticsSDK.SOLPopupContent : SoliticsSDK.IPopupContent {
}
extension SoliticsSDK.SOLPopupContent {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public protocol IEmitEventMetadata {
  var brand: Swift.String? { get set }
  var branch: Swift.String? { get set }
  var email: Swift.String? { get set }
  var customFields: Swift.String? { get set }
  var keyType: Swift.String? { get set }
  var keyValue: Swift.String? { get set }
  var transactionID: Swift.String? { get set }
  var transactionType: Swift.String? { get set }
  var transactionAmount: Swift.Double? { get set }
  var memberId: Swift.Int? { get set }
  var token: Swift.String? { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SOLWindow : UIKit.UIWindow {
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(windowScene: UIKit.UIWindowScene)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIWindow {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var sol_isSoliticsWindow: Swift.Bool {
    @objc get
  }
}
@objc public class SOLEmitEventResult : ObjectiveC.NSObject {
  final public let hashedSubscriberId: Swift.Int
  public init(_ subscriberId: Swift.Int)
  convenience public init(result: SoliticsSDK.IEmitEventResult)
  @objc deinit
}
extension SoliticsSDK.SOLEmitEventResult : SoliticsSDK.IEmitEventResult {
}
extension SoliticsSDK.SOLEmitEventResult {
  public typealias ReturnType = SoliticsSDK.SOLEmitEventResult
  public func toJSON() -> [Swift.String : Any]
  public static func fromJSON(_ dictionary: [Swift.AnyHashable : Any]) -> SoliticsSDK.SOLEmitEventResult.ReturnType?
}
public protocol ILoginMetadata {
  var brand: Swift.String? { get set }
  var branch: Swift.String? { get set }
  var email: Swift.String? { get set }
  var customFields: Swift.String? { get set }
  var keyType: Swift.String? { get set }
  var keyValue: Swift.String? { get set }
  var transactionID: Swift.String? { get set }
  var transactionType: Swift.String? { get set }
  var transactionAmount: Swift.Double? { get set }
  var memberId: Swift.Int? { get set }
  var token: Swift.String? { get set }
}
public protocol IPopupContent {
  var messageID: Swift.String { get }
  var messageHTML: Swift.String { get }
  var webhookParams: [Swift.String : Any] { get }
}
